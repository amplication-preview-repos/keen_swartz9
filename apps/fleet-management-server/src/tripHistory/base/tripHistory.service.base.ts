/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TripHistory as PrismaTripHistory,
  Driver as PrismaDriver,
  Vehicle as PrismaVehicle,
} from "@prisma/client";

export class TripHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TripHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tripHistory.count(args);
  }

  async tripHistories(
    args: Prisma.TripHistoryFindManyArgs
  ): Promise<PrismaTripHistory[]> {
    return this.prisma.tripHistory.findMany(args);
  }
  async tripHistory(
    args: Prisma.TripHistoryFindUniqueArgs
  ): Promise<PrismaTripHistory | null> {
    return this.prisma.tripHistory.findUnique(args);
  }
  async createTripHistory(
    args: Prisma.TripHistoryCreateArgs
  ): Promise<PrismaTripHistory> {
    return this.prisma.tripHistory.create(args);
  }
  async updateTripHistory(
    args: Prisma.TripHistoryUpdateArgs
  ): Promise<PrismaTripHistory> {
    return this.prisma.tripHistory.update(args);
  }
  async deleteTripHistory(
    args: Prisma.TripHistoryDeleteArgs
  ): Promise<PrismaTripHistory> {
    return this.prisma.tripHistory.delete(args);
  }

  async getDriver(parentId: string): Promise<PrismaDriver | null> {
    return this.prisma.tripHistory
      .findUnique({
        where: { id: parentId },
      })
      .driver();
  }

  async getVehicle(parentId: string): Promise<PrismaVehicle | null> {
    return this.prisma.tripHistory
      .findUnique({
        where: { id: parentId },
      })
      .vehicle();
  }
}
