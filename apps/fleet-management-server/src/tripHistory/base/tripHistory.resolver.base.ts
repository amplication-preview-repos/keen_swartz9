/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TripHistory } from "./TripHistory";
import { TripHistoryCountArgs } from "./TripHistoryCountArgs";
import { TripHistoryFindManyArgs } from "./TripHistoryFindManyArgs";
import { TripHistoryFindUniqueArgs } from "./TripHistoryFindUniqueArgs";
import { CreateTripHistoryArgs } from "./CreateTripHistoryArgs";
import { UpdateTripHistoryArgs } from "./UpdateTripHistoryArgs";
import { DeleteTripHistoryArgs } from "./DeleteTripHistoryArgs";
import { Driver } from "../../driver/base/Driver";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { TripHistoryService } from "../tripHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TripHistory)
export class TripHistoryResolverBase {
  constructor(
    protected readonly service: TripHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TripHistory",
    action: "read",
    possession: "any",
  })
  async _tripHistoriesMeta(
    @graphql.Args() args: TripHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TripHistory])
  @nestAccessControl.UseRoles({
    resource: "TripHistory",
    action: "read",
    possession: "any",
  })
  async tripHistories(
    @graphql.Args() args: TripHistoryFindManyArgs
  ): Promise<TripHistory[]> {
    return this.service.tripHistories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TripHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TripHistory",
    action: "read",
    possession: "own",
  })
  async tripHistory(
    @graphql.Args() args: TripHistoryFindUniqueArgs
  ): Promise<TripHistory | null> {
    const result = await this.service.tripHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TripHistory)
  @nestAccessControl.UseRoles({
    resource: "TripHistory",
    action: "create",
    possession: "any",
  })
  async createTripHistory(
    @graphql.Args() args: CreateTripHistoryArgs
  ): Promise<TripHistory> {
    return await this.service.createTripHistory({
      ...args,
      data: {
        ...args.data,

        driver: args.data.driver
          ? {
              connect: args.data.driver,
            }
          : undefined,

        vehicle: args.data.vehicle
          ? {
              connect: args.data.vehicle,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TripHistory)
  @nestAccessControl.UseRoles({
    resource: "TripHistory",
    action: "update",
    possession: "any",
  })
  async updateTripHistory(
    @graphql.Args() args: UpdateTripHistoryArgs
  ): Promise<TripHistory | null> {
    try {
      return await this.service.updateTripHistory({
        ...args,
        data: {
          ...args.data,

          driver: args.data.driver
            ? {
                connect: args.data.driver,
              }
            : undefined,

          vehicle: args.data.vehicle
            ? {
                connect: args.data.vehicle,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TripHistory)
  @nestAccessControl.UseRoles({
    resource: "TripHistory",
    action: "delete",
    possession: "any",
  })
  async deleteTripHistory(
    @graphql.Args() args: DeleteTripHistoryArgs
  ): Promise<TripHistory | null> {
    try {
      return await this.service.deleteTripHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Driver, {
    nullable: true,
    name: "driver",
  })
  @nestAccessControl.UseRoles({
    resource: "Driver",
    action: "read",
    possession: "any",
  })
  async getDriver(
    @graphql.Parent() parent: TripHistory
  ): Promise<Driver | null> {
    const result = await this.service.getDriver(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vehicle, {
    nullable: true,
    name: "vehicle",
  })
  @nestAccessControl.UseRoles({
    resource: "Vehicle",
    action: "read",
    possession: "any",
  })
  async getVehicle(
    @graphql.Parent() parent: TripHistory
  ): Promise<Vehicle | null> {
    const result = await this.service.getVehicle(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
